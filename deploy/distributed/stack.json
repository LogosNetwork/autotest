{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates an Amazon EFS file system and mount target and associates it with Amazon EC2 instances in an Auto Scaling group. **WARNING** This template creates Amazon EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters": {
    "LogosVersion": {
      "Type" : "String",
      "Description" : "Enter version identifier for corresponding rai_node (logos) binary version."
    },
    "AgentVersion": {
      "Type" : "String",
      "Description" : "Enter version identifier for corresponding agent.py version."
    },
    "LDBVersion": {
      "Type" : "String",
      "Description" : "Enter version identifier for corresponding data.ldb version."
    },
    "ConfVersion": {
      "Type" : "String",
      "Description" : "Enter version identifier for corresponding bench.conf.json version."
    },
    "ProductionFlag": {
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false",
      "Description": "Indicator of whether to enable delegate 0 of the nodes to send callback data to pla.bs/callback."
    },
    "StackTTL" : {
      "Description" : "Duration in minutes after which the stack should be deleted",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "1440",
      "Default": "120"
    },
    "VolumeType" : {
      "Description" : "EBS volume type, can be io1 (IOPS provisioned) or gp2 (General Purpose)",
      "Type" : "String",
      "Default" : "gp2",
      "AllowedValues" : ["gp2", "io1"],
      "ConstraintDescription" : "Must be a valid EBS volume type."
    },
    "IOPS" : {
      "Description" : "IOPS",
      "Type": "Number",
      "MinValue": "60",
      "MaxValue": "32000",
      "Default": "120"
    },
    "VolSize" : {
      "Description" : "Volume size (in GiB)",
      "Type": "Number",
      "MinValue": "20",
      "MaxValue": "640",
      "Default": "40"
    },
    "NVMe" : {
      "Type" : "String",
      "AllowedValues" : [
        "true", "false"
      ],
      "Default" : "false",
      "Description" : "Indicator of whether to attach ephemeral volume (only applicable to i3 instance types with NVMe)"
    },
    "InstanceType" : {
      "Description" : "Bench cluster EC2 instance type",
      "Type" : "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.xlarge",
        "t2.2xlarge",
        "t3.micro",
        "t3.small",
        "t3.medium",
        "t3.xlarge",
        "t3.2xlarge",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge",
        "i3.large",
        "i3.xlarge",
        "i3.2xlarge",
        "i3.4xlarge",
        "i3.8xlarge",
        "i3.16xlarge",
        "i3.metal",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge"
      ],
      "ConstraintDescription" : "Must be a valid EC2 instance type."
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 key pair to enable SSH access to the ECS instances",
      "Default": "team-benchmark",
      "ConstraintDescription" : "Must be a valid key pair name."
    },
    "AsgMaxSize": {
      "Type": "Number",
      "Description": "Maximum size and initial desired capacity of Auto Scaling Group",
      "Default": "4"
    },
    "SSHLocation" : {
      "Description" : "The IP address range that can be used to connect to the EC2 instances by using SSH",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Conditions" : {
    "UseNVMe": {
      "Fn::Equals": [
        {
          "Ref": "NVMe"
        },
        "true"
      ]
    },
    "IsProduction": {
      "Fn::Equals": [
        "true",
        {
          "Ref": "ProductionFlag"
        }
      ]
    }
  },
  "Mappings" : {
    "Region2Subnet": {
      "us-east-1": {"Id": "subnet-857f9cab"},
      "us-west-1": {"Id": "subnet-68700233"},
      "ap-northeast-2": {"Id": "subnet-9c7959f4"},
      "ap-southeast-1": {"Id": "subnet-2bb0e562"},
      "eu-west-1": {"Id": "subnet-381af762"}
    },
    "Region2VPC": {
      "ap-northeast-2": { "Id" : "vpc-b881a7d0" },
      "ap-southeast-1": { "Id" : "vpc-b44f2ed3" },
      "eu-west-1": { "Id" : "vpc-19f2957f" },
      "us-east-1": { "Id" : "vpc-f3c48d88" },
      "us-west-1": { "Id" : "vpc-5953c93e" }
    },
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "PV64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "t2.xlarge": {
        "Arch": "HVM64"
      },
      "t2.2xlarge": {
        "Arch": "HVM64"
      },
      "t3.micro": {
        "Arch": "HVM64"
      },
      "t3.small": {
        "Arch": "HVM64"
      },
      "t3.medium": {
        "Arch": "HVM64"
      },
      "t3.xlarge": {
        "Arch": "HVM64"
      },
      "t3.2xlarge": {
        "Arch": "HVM64"
      },
      "i3.large": {
        "Arch": "HVM64"
      },
      "i3.xlarge": {
        "Arch": "HVM64"
      },
      "i3.2xlarge": {
        "Arch": "HVM64"
      },
      "i3.4xlarge": {
        "Arch": "HVM64"
      },
      "m5.large": {
        "Arch": "HVM64"
      },
      "m5.xlarge": {
        "Arch": "HVM64"
      },
      "m5.2xlarge": {
        "Arch": "HVM64"
      },
      "m5.4xlarge": {
        "Arch": "HVM64"
      }
    },
    "VolumeRegionId": {
      "us-east-1" : {
        "io1": "io1-us-east-1",
        "gp2": "gp2-us-east-1"
      },
      "us-west-1" : {
        "io1": "io1-us-west-1",
        "gp2": "gp2-us-west-1"
      },
      "ap-northeast-2" : {
        "io1": "io1-ap-northeast-2",
        "gp2": "gp2-ap-northeast-2"
      },
      "sa-east-1" : {
        "io1": "io1-sa-east-1",
        "gp2": "gp2-sa-east-1"
      },
      "eu-west-1" : {
        "io1": "io1-eu-west-1",
        "gp2": "gp2-eu-west-1"
      },
      "ap-southeast-1" : {
        "io1": "io1-ap-southeast-1",
        "gp2": "gp2-ap-southeast-1"
      }
    },
    "VolumeRegionArch2AMI": {
      "io1-us-east-1": {
        "PV64": "ami-09cc2ac032dabbdc8",
        "HVM64": "ami-09cc2ac032dabbdc8"
      },
      "gp2-us-east-1": {
        "PV64": "ami-0e14967ef9b685d2e",
        "HVM64": "ami-0e14967ef9b685d2e"
      },
      "io1-us-west-1": {
        "PV64": "ami-0d57457a58db81c02",
        "HVM64": "ami-0d57457a58db81c02"
      },
      "gp2-us-west-1": {
        "PV64": "ami-0d57457a58db81c02",
        "HVM64": "ami-0d57457a58db81c02"
      },
      "io1-ap-northeast-2": {
        "PV64": "ami-03e14eb8a1ead1c42",
        "HVM64": "ami-03e14eb8a1ead1c42"
      },
      "gp2-ap-northeast-2": {
        "PV64": "ami-03e14eb8a1ead1c42",
        "HVM64": "ami-03e14eb8a1ead1c42"
      },
      "io1-sa-east-1": {
        "PV64": "ami-000c593b5e731e065",
        "HVM64": "ami-000c593b5e731e065"
      },
      "gp2-sa-east-1": {
        "PV64": "ami-000c593b5e731e065",
        "HVM64": "ami-000c593b5e731e065"
      },
      "io1-eu-west-1": {
        "PV64": "ami-03f0773e40a969b8e",
        "HVM64": "ami-03f0773e40a969b8e"
      },
      "gp2-eu-west-1": {
        "PV64": "ami-0e3478c1b7efee18a",
        "HVM64": "ami-0e3478c1b7efee18a"
      },
      "io1-ap-southeast-1": {
        "PV64": "ami-032f33d45e366de34",
        "HVM64": "ami-032f33d45e366de34"
      },
      "gp2-ap-southeast-1": {
        "PV64": "ami-032f33d45e366de34",
        "HVM64": "ami-032f33d45e366de34"
      }
    }
  },
  "Resources": {
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn" : "BenchNodeRole",
      "Properties": {
        "VpcId": { "Fn::FindInMap" : [ "Region2VPC", { "Ref" : "AWS::Region" }, "Id" ] },
        "GroupDescription": "Allow 22, 80, and 55000 (for RPC), 56000-56002 (TxAcceptor) for all, and 60000 only for inter-delegate communication",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "55000", "ToPort": "55000", "CidrIp": "0.0.0.0/0"},
          { "IpProtocol": "tcp", "FromPort": "56000", "ToPort": "56002", "CidrIp": "0.0.0.0/0"},
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "SSHLocation" } },
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0"},
          { "IpProtocol": "tcp", "FromPort": "14495", "ToPort": "14495", "CidrIp": "0.0.0.0/0"}
        ]
      }
    },
    "ConsensusIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "InstanceSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "60000",
        "ToPort": "60002",
        "SourceSecurityGroupId": {
          "Ref": "InstanceSecurityGroup"
        }
      }
    },
    "BenchNodeIAMInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "BenchNodeRole"
          }
        ]
      }
    },
    "BenchNodeRole": {
      "Type": "AWS::IAM::Role",
      "Metadata" : { "Comment" : "This role requires permissions to delete each of the stack resources. All other stack resources depend directly or indirectly on this role via DependsOn, Ref, or Fn::GetAtt, to ensure that the role is the last of the stack resources to be deleted." },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"],
        "Path": "/",
        "Policies" : [
          {
            "PolicyName": "AllowStackDeletionPolicy",
            "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [ "cloudformation:DeleteStack" ],
                  "Resource": { "Ref" : "AWS::StackId" }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:Describe*",
                    "cloudformation:Describe*",
                    "autoscaling:Describe*Scaling*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [ "autoscaling:*AutoScalingGroup" ],
                  "Resource": "*",
                  "Condition": { "StringEquals": { "autoscaling:ResourceTag/aws:cloudformation:stack-id": { "Ref" : "AWS::StackId" } } }
                },
                {
                  "Effect": "Allow",
                  "Action": [ "autoscaling:DeleteLaunchConfiguration" ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [ "ec2:TerminateInstances", "ec2:DeleteSecurityGroup" ],
                  "Resource": "*",
                  "Condition": { "StringEquals": { "ec2:ResourceTag/aws:cloudformation:stack-id": { "Ref" : "AWS::StackId" } } }
                },
                {
                  "Effect": "Allow",
                  "Action": [ "iam:DeleteInstanceProfile", "iam:RemoveRoleFromInstanceProfile" ],
                  "Resource": { "Fn::Join" : ["", ["arn:aws:iam::", { "Ref" : "AWS::AccountId" }, ":instance-profile/", { "Ref" : "AWS::StackName" }, "-", "BenchNodeIAMInstanceProfile", "-*" ]] }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:RevokeSecurityGroupIngress"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:ec2:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":security-group/*"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [ "iam:DeleteRole", "iam:DetachRolePolicy", "iam:DeleteRolePolicy" ],
                  "Resource": { "Fn::Join" : ["", ["arn:aws:iam::", { "Ref" : "AWS::AccountId" }, ":role/", { "Ref" : "AWS::StackName" }, "-", "BenchNodeRole", "-*" ]] }
                }
              ]
            }
          }
        ]
      }
    },

    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InitConfig" : [ "ConfigureCFN" ],
            "MountConfig" : [ "ConfigureTTL" ]
          },
          "ConfigureCFN" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init\n",
                  "action=/usr/local/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource LaunchConfiguration ",
                  "         --configsets MountConfig ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                  "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          },
          "ConfigureTTL" : {
            "files" : {
              "/usr/local/bin/deletestack.sh" : {
                "content" : { "Fn::Join" : ["", [ "aws cloudformation delete-stack --region ", { "Ref" : "AWS::Region" }, " --stack-name ", { "Ref" : "AWS::StackId" } ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              }
            },
            "commands" : {
              "schedule_stack_deletion" : {
                "command" : { "Fn::Join" : ["", [ "at -f /usr/local/bin/deletestack.sh now + ", { "Ref" : "StackTTL" }, " minutes" ]]}
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress" : true,
        "ImageId": {
          "Fn::If" : [ "UseNVMe" ,
            "ami-0c02181066bdb4a41",
            {"Fn::FindInMap": [
              "VolumeRegionArch2AMI",
              {
                "Fn::FindInMap": [
                  "VolumeRegionId",
                  {"Ref": "AWS::Region"},
                  { "Ref": "VolumeType" }
                ]
              },
              {
                "Fn::FindInMap": [
                  "AWSInstanceType2Arch",
                  {"Ref": "InstanceType"},
                  "Arch"
                ]
              }
            ]}
          ]
        },
        "InstanceType": { "Ref": "InstanceType" },
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sda1",
            "Ebs" : {
              "VolumeType" : { "Ref": "VolumeType" },
              "DeleteOnTermination" : "true",
              "VolumeSize" : { "Ref": "VolSize" },
              "Iops" : { "Ref": "IOPS" }
            }
          }
        ],
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": [ { "Ref": "InstanceSecurityGroup" } ],
        "IamInstanceProfile" : { "Ref" : "BenchNodeIAMInstanceProfile" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource LaunchConfiguration ",
          "         --configsets InitConfig ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",
          "apt-get update\n",
          "mkdir -p /home/ubuntu/bench\n",
          {
            "Fn::If" :
            [
              "UseNVMe",
              {"Fn::Join" : ["", [
                "mkfs -t ext4 /dev/nvme0n1\n",
                "mount /dev/nvme0n1 /home/ubuntu/bench\n"
              ]]},
              ""
            ]
          },
          "echo 'export PUBLIC_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)' >> /home/ubuntu/.bashrc && . /home/ubuntu/.bashrc\n",
          "# mkdir /home/ubuntu/bench/logs-efs && mount -t efs fs-10737f58:/ /home/ubuntu/bench/logs-efs\n",
	  "aws s3 cp s3://logos-bench-", { "Ref" : "AWS::Region" }, "/helpers/db-tests /home/ubuntu/db-tests --recursive\n",
	  "aws s3 cp s3://logos-bench-", { "Ref" : "AWS::Region" }, "/helpers/lmdb-reader /home/ubuntu/lmdb-reader --recursive\n",
          "aws s3 cp s3://logos-bench-", { "Ref" : "AWS::Region" }, "/helpers/prepare_local_files.sh /home/ubuntu/bench/prepare_local_files.sh\n",
          "sudo -H pip install boto3\n",
          "sudo chmod a+x /home/ubuntu/bench/prepare_local_files.sh\n",
          "sudo /home/ubuntu/bench/prepare_local_files.sh ",
          { "Ref": "LogosVersion" }, " ",
          { "Ref": "AgentVersion" }, " ",
          { "Ref": "LDBVersion" }, " ",
          { "Ref": "ConfVersion" }, " ",
          {
            "Ref": "AWS::Region"
          },
          " ",
          {
            "Fn::If": [
              "IsProduction",
              "--callback",
              ""
            ]
          },
          "\n",
          "python /home/ubuntu/bench/agent.py &\n",
          "mkdir -p /home/ubuntu/bench/logs-efs && mount -t efs fs-0d89ebec:/ /home/ubuntu/bench/logs-efs\n",
          {
            "Fn::If": [
              "IsProduction",
              {
                "Fn::Join": [
                  "",
                  [
                    "cfn-init -v ",
                    "         --stack ",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "         --resource LaunchConfiguration ",
                    "         --configsets MountConfig ",
                    "         --region ",
                    {
                      "Ref": "AWS::Region"
                    },
                    "\n"
                  ]
                ]
              },
              ""
            ]
          },
          "cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource AutoScalingGroup ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [ ],
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT24H",
          "Count"   : { "Ref": "AsgMaxSize" }
        }
      },
      "Properties": {
        "VPCZoneIdentifier": [ {"Fn::FindInMap" : [ "Region2Subnet", { "Ref" : "AWS::Region" }, "Id" ]} ],
        "LaunchConfigurationName": { "Ref": "LaunchConfiguration" },
        "MinSize": "0",
        "MaxSize": { "Ref": "AsgMaxSize" },
        "DesiredCapacity": { "Ref": "AsgMaxSize" },
        "Tags": [ {
          "Key": "Name",
          "Value": { "Ref": "AWS::StackName" },
          "PropagateAtLaunch": "true"
        } ]
      }
    }
  },
  "Outputs" : {

  }
}
